# -*- coding: utf-8 -*-
"""MINST_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LLYNh7CF6ijP1t9go_u7vqJoicwKTsfU
"""

from keras.models import load_model
from keras.models import Model
from keras import backend as K
from PIL import Image
import numpy as np
import os
import csv
import cv2
import time
from matplotlib import pyplot as plt
import pandas as pd
import random

LETTERSTR = '0123456789'
model_path = '/content/drive/MyDrive/Algorithm/Midterm/Algo_midterm1619459079.h5'
test_root = '/content/drive/MyDrive/Algorithm/Midterm/test_image'

df = pd.DataFrame(columns=[None, None, None])
df.columns = ['img_path', 'real', 'predict']

test_path = []
for file in os.listdir(test_root):
  tmp_path = os.path.join(test_root, file)
  for d in os.listdir(tmp_path):
    test_path.append(os.path.join(tmp_path, d))
random.seed(20)
random.shuffle(test_path)
test_path[0:5]

data_path = []
test_label = []
for i in range(len(test_path)):
  for root, dirs, files in os.walk(test_path[i]):
    for n in range(len(files)):
      data_path.append(os.path.join(root, files[n]))
      test_label.append(root[-1])

print('checkpoint: ', test_label[0:5])
print('length of directories: ', len(test_path))
print('The shape of labels: ', np.shape(test_label))

df['img_path'] = data_path
df['real'] = test_label

def cv_imread(filePath):
    cv_img=cv2.imdecode(np.fromfile(filePath,dtype=np.uint8), cv2.IMREAD_COLOR)
    img_gray = cv2.cvtColor(cv_img, cv2.COLOR_RGB2GRAY)
    return img_gray

#img = [cv_imread(data_path[i]) for i in range(len(data_path))]
#np.save('test_img', img)

test_matrix = np.load('/content/drive/MyDrive/Algorithm/Midterm/test_img.npy')
print(test_matrix.shape)
test_data = np.stack([np.array(i)/255.0 for i in test_matrix])
test_data.shape

print('--------Predicting---------')
K.clear_session()
model = None
model = load_model(model_path)
prediction = model.predict(test_data)

predict_num = []
for i in range(len(data_path)):
  ans = LETTERSTR[np.argmax(prediction[i])]
  predict_num.append(ans)
df['predict'] = predict_num
df.to_csv(os.getcwd()+'testing.csv')
print('Testing dataframe is saved in: ', os.getcwd())

accuracy = (np.count_nonzero(df["real"]==df["predict"])) / len(data_path)
print(accuracy)
print("accuracy = ", format(accuracy * 100, "0.2f"), sep = "")











